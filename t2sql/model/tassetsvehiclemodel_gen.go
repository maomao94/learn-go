// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tAssetsVehicleFieldNames          = builder.RawFieldNames(&TAssetsVehicle{})
	tAssetsVehicleRows                = strings.Join(tAssetsVehicleFieldNames, ",")
	tAssetsVehicleRowsExpectAutoSet   = strings.Join(stringx.Remove(tAssetsVehicleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tAssetsVehicleRowsWithPlaceHolder = strings.Join(stringx.Remove(tAssetsVehicleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tAssetsVehicleModel interface {
		RowBuilder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *TAssetsVehicle) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TAssetsVehicle, error)
		Update(ctx context.Context, data *TAssetsVehicle) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*TAssetsVehicle, error)
	}

	defaultTAssetsVehicleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TAssetsVehicle struct {
		Id                        int64        `db:"id"`
		Vin                       string       `db:"vin"`                         // 车架号
		EngineNo                  string       `db:"engine_no"`                   // 发动机号
		PropertyStatus            int64        `db:"property_status"`             // 资产状态 1 : 在建工程 2 : 固定资产 3 : 固定资产（待报废）4 : 报废 5 : 固定资产(待处置) 6 : 固定资产(已处置) 7 : 以租代售 8 : 库存商品 9 : 已处置（未过户）
		PropertyOrgId             string       `db:"property_org_id"`             // 资产公司编号
		PropertyOrgName           string       `db:"property_org_name"`           // 资产公司名称
		OperationOrgId            string       `db:"operation_org_id"`            // 运营公司编号
		OperationOrgName          string       `db:"operation_org_name"`          // 运营公司名称
		DeliveryStatus            int64        `db:"delivery_status"`             // 交付状态 0 未交付 1 已交付
		VehicleModelId            int64        `db:"vehicle_model_id"`            // 车辆型号id
		BrandModelId              int64        `db:"brand_model_id"`              // 品牌型号id
		VehicleChannel            int64        `db:"vehicle_channel"`             // 车辆渠道 1:普通 2 EVCARD 3 通用时行 4别克代步车 5松江大学城 6别克深度体验 7享道用车 8大众试乘试驾 9携程项目 10特殊车辆
		VehicleSource             int64        `db:"vehicle_source"`              // 车辆来源 1:本司采购 2：外来租赁
		PutInStatus               int64        `db:"put_in_status"`               // 投运状态 1:未投运 2:投运成功 3:投运审批中
		SysTermId                 int64        `db:"sys_term_id"`                 // 终端id
		CommercialInsuranceExpire sql.NullTime `db:"commercial_insurance_expire"` // 商业险到期日
		CompulsoryInsuranceExpire sql.NullTime `db:"compulsory_insurance_expire"` // 交强险到期日
		IsDeleted                 int64        `db:"is_deleted"`                  // 状态（0=正常   1=已删除）
		CreateTime                time.Time    `db:"create_time"`                 // 创建时间
		CreateOperAccount         string       `db:"create_oper_account"`
		CreateOperName            string       `db:"create_oper_name"`
		UpdateTime                time.Time    `db:"update_time"` // 更新时间
		UpdateOperAccount         string       `db:"update_oper_account"`
		UpdateOperName            string       `db:"update_oper_name"`
	}
)

func newTAssetsVehicleModel(conn sqlx.SqlConn) *defaultTAssetsVehicleModel {
	return &defaultTAssetsVehicleModel{
		conn:  conn,
		table: "`t_assets_vehicle`",
	}
}

func (m *defaultTAssetsVehicleModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(tAssetsVehicleRows).From(m.table)
}

func (m *defaultTAssetsVehicleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTAssetsVehicleModel) FindOne(ctx context.Context, id int64) (*TAssetsVehicle, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tAssetsVehicleRows, m.table)
	var resp TAssetsVehicle
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTAssetsVehicleModel) Insert(ctx context.Context, data *TAssetsVehicle) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tAssetsVehicleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Vin, data.EngineNo, data.PropertyStatus, data.PropertyOrgId, data.PropertyOrgName, data.OperationOrgId, data.OperationOrgName, data.DeliveryStatus, data.VehicleModelId, data.BrandModelId, data.VehicleChannel, data.VehicleSource, data.PutInStatus, data.SysTermId, data.CommercialInsuranceExpire, data.CompulsoryInsuranceExpire, data.IsDeleted, data.CreateOperAccount, data.CreateOperName, data.UpdateOperAccount, data.UpdateOperName)
	return ret, err
}

func (m *defaultTAssetsVehicleModel) Update(ctx context.Context, data *TAssetsVehicle) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tAssetsVehicleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Vin, data.EngineNo, data.PropertyStatus, data.PropertyOrgId, data.PropertyOrgName, data.OperationOrgId, data.OperationOrgName, data.DeliveryStatus, data.VehicleModelId, data.BrandModelId, data.VehicleChannel, data.VehicleSource, data.PutInStatus, data.SysTermId, data.CommercialInsuranceExpire, data.CompulsoryInsuranceExpire, data.IsDeleted, data.CreateOperAccount, data.CreateOperName, data.UpdateOperAccount, data.UpdateOperName, data.Id)
	return err
}

func (m *defaultTAssetsVehicleModel) tableName() string {
	return m.table
}
